// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: watermark.sql

package db

import (
	"context"
)

const createWatermark = `-- name: CreateWatermark :one
INSERT INTO watermark (name, width, height, opacity) VALUES ($1, $2, $3, $4)
RETURNING id, name, width, height, opacity, create_at, update_at
`

type CreateWatermarkParams struct {
	Name    string
	Width   int64
	Height  int64
	Opacity float32
}

func (q *Queries) CreateWatermark(ctx context.Context, arg CreateWatermarkParams) (Watermark, error) {
	row := q.db.QueryRowContext(ctx, createWatermark,
		arg.Name,
		arg.Width,
		arg.Height,
		arg.Opacity,
	)
	var i Watermark
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Width,
		&i.Height,
		&i.Opacity,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const deleteWatermark = `-- name: DeleteWatermark :exec
DELETE FROM watermark WHERE id = $1
`

func (q *Queries) DeleteWatermark(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteWatermark, id)
	return err
}

const getWatermark = `-- name: GetWatermark :one
SELECT id, name, width, height, opacity, create_at, update_at FROM watermark WHERE id = $1
`

func (q *Queries) GetWatermark(ctx context.Context, id int64) (Watermark, error) {
	row := q.db.QueryRowContext(ctx, getWatermark, id)
	var i Watermark
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Width,
		&i.Height,
		&i.Opacity,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const listWatermark = `-- name: ListWatermark :many
SELECT id, name, width, height, opacity, create_at, update_at FROM watermark
`

func (q *Queries) ListWatermark(ctx context.Context) ([]Watermark, error) {
	rows, err := q.db.QueryContext(ctx, listWatermark)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Watermark
	for rows.Next() {
		var i Watermark
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Width,
			&i.Height,
			&i.Opacity,
			&i.CreateAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWatermark = `-- name: UpdateWatermark :exec
UPDATE watermark SET
name = $2,
width = $3,
height = $4,
opacity = $5,
update_at = NOW()
WHERE id = $1
`

type UpdateWatermarkParams struct {
	ID      int64
	Name    string
	Width   int64
	Height  int64
	Opacity float32
}

func (q *Queries) UpdateWatermark(ctx context.Context, arg UpdateWatermarkParams) error {
	_, err := q.db.ExecContext(ctx, updateWatermark,
		arg.ID,
		arg.Name,
		arg.Width,
		arg.Height,
		arg.Opacity,
	)
	return err
}
